stages:
  - build
  - test
  - push
  - deploy
  
build:
  # NOTE: We don't want to build the postgres image every time, since it shouldn't change.
  #  - could be smart to move it to its own repo, but we'll keep it here for now.
  stage: build
  image: 
    name: docker/compose:1.25.4
    entrypoint: ["/bin/sh", "-c"]
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.0-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose -f docker-compose.yml -f docker-compose.test.yml -f docker-compose.preview.yml build
    - docker-compose -f docker-compose.yml -f docker-compose.test.yml -f docker-compose.preview.yml push

test:
  stage: test
  image: 
    name: docker/compose:1.25.4
    entrypoint: ["/bin/sh", "-c"]
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.0-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose -f docker-compose.yml -f docker-compose.test.yml -f docker-compose.preview.yml pull
    - chmod +x test.sh
    - ./test.sh

# Picked up from this article: https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/
push:
  variables:
    # We are just playing with Docker here. 
    # We do not need GitLab to clone the source code.
    GIT_STRATEGY: none
  stage: push
  only:
    # Only "master" should be tagged "latest"
    - master
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Because we have no guarantee that this job will be picked up by the same runner 
    # that built the image in the previous step, we pull it again locally
    #
    # TODO: Get rid of this hardcoded mess.
    - docker pull ${CI_REGISTRY_IMAGE}/postgres:${CI_COMMIT_SHORT_SHA}
    - docker pull ${CI_REGISTRY_IMAGE}/migrate:${CI_COMMIT_SHORT_SHA}
    - docker pull ${CI_REGISTRY_IMAGE}/api:${CI_COMMIT_SHORT_SHA}
    - docker pull ${CI_REGISTRY_IMAGE}/ui:${CI_COMMIT_SHORT_SHA}
    - docker pull ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA}
    # Then we tag it "latest"
    - docker tag ${CI_REGISTRY_IMAGE}/postgres:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}/postgres:latest
    - docker tag ${CI_REGISTRY_IMAGE}/migrate:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}/migrate:latest
    - docker tag ${CI_REGISTRY_IMAGE}/api:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}/api:latest
    - docker tag ${CI_REGISTRY_IMAGE}/ui:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}/ui:latest
    - docker tag ${CI_REGISTRY_IMAGE}/e2e:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}/e2e:latest
    # Annnd we push it.
    - docker push ${CI_REGISTRY_IMAGE}/postgres:latest
    - docker push ${CI_REGISTRY_IMAGE}/migrate:latest
    - docker push ${CI_REGISTRY_IMAGE}/api:latest
    - docker push ${CI_REGISTRY_IMAGE}/ui:latest
    - docker push ${CI_REGISTRY_IMAGE}/e2e:latest

deploy:
  stage: deploy
  only:
    - master
  script:
    # Create env-file with real secrets.
    - chmod +x setup_env.sh
    - ./setup_env.sh env_file
    # Create ssh dir and add the private key.
    - mkdir -p ~/.ssh
    - echo "$PRODUCTION_SERVER_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    # Add server to known hosts
    - ssh-keyscan -H $PRODUCTION_SERVER_IP >> ~/.ssh/known_hosts
    # Copy env-file and docker-compose.yml to the remote server.
    - cat env_file | ssh ec2-user@$PRODUCTION_SERVER_IP "cat > .env"
    - cat docker-compose.yml | ssh ec2-user@$PRODUCTION_SERVER_IP "cat > docker-compose.yml"
    # Login to the container registry, pull images and start.
    - ssh ec2-user@$PRODUCTION_SERVER_IP docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - ssh ec2-user@$PRODUCTION_SERVER_IP "docker-compose pull && docker-compose up -d && docker image prune -f"
